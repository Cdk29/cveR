write.csv(short_data, output_file_name, row.names = FALSE)
}
# Chunk 6
#write_head_to_csv(input_file_name = "allitems.csv", output_file_name = "tests/testthat/allitems_test.csv", num_rows = 60)
# Chunk 7: tests-cves_harvesting
test_that("cves_harvesting returns FALSE when an invalid URL is given", {
expect_false(cves_harvesting("http://this-is-an-invalid-url.csv"))
})
test_that("cves_harvesting returns TRUE when a valid URL is given", {
expect_true(cves_harvesting("https://raw.githubusercontent.com/Cdk29/cveR/main/tests/testthat/allitems_test.csv", "test_download_from_github.csv"))
})
test_that("test_download_from_github.csv is the same as allitems_test.csv", {
downloaded_data <- read.csv("test_download_from_github.csv")
#following lines due to how fusen works when inflating a package
test_data <- tryCatch(
{
read.csv("allitems_test.csv")
},
warning = function(w) {
read.csv("tests/testthat/allitems_test.csv")
},
error = function(e) {
read.csv("tests/testthat/allitems_test.csv")
})
expect_true(all.equal(downloaded_data, test_data))
})
# Chunk 8: function-read_data_CVEs
#' Read Data from CVEs CSV File
#'
#' This function reads a CSV file, skipping the first few rows to retrieve the headers and data separately.
#' It then assigns the header names to the data and returns a dataframe.
#'
#' @param file_name The name of the file to read.
#'
#' @return A dataframe with data from the CSV file.
#0'
#' @examples
#' read_data_CVEs("allitems.csv")
#'
#' @export
read_data_CVEs <- function(file_name) {
headers = read.csv(file_name, skip = 2, nrows = 1, header = TRUE)
data <- read.csv(file_name, encoding = "ISO-8859-1", skip = 10, header = TRUE, stringsAsFactors = FALSE)
colnames(data) <- colnames(headers)
return(data)
}
# Chunk 9: examples-read_data_CVEs
cves_harvesting("https://raw.githubusercontent.com/Cdk29/cveR/main/tests/testthat/allitems_test.csv", "test_download_from_github.csv")
CVEs_df <- read_data_CVEs("test_download_from_github.csv")
head(CVEs_df, 2)
colnames(CVEs_df)
# Chunk 10: tests-read_data_CVEs
test_that("read_data_CVEs correctly reads column names", {
# Attempt to read the test data from two different locations
test_data <- tryCatch(
{
read_data_CVEs("allitems_test.csv")
},
warning = function(w) {
read_data_CVEs("tests/testthat/allitems_test.csv")
},
error = function(e) {
read_data_CVEs("tests/testthat/allitems_test.csv")
}
)
expected_colnames <- c("Status", "Description", "References", "Phase", "Votes", "Comments")
expect_equal(colnames(test_data), expected_colnames)
})
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_cves-harvesting.Rmd", vignette_name = "Cve_harvesting")
getwd()
usethis::use_github_action("test-coverage")
usethis::use_readme_rmd()
usethis::use_github_action("render-rmarkdown")
usethis::use_readme_rmd()
usethis::use_github_action("render-rmarkdown")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
golem::document_and_reload()
setwd("~/Bureau/cveR")
golem::document_and_reload()
renv::snapshot(type = "explicit")
golem::document_and_reload()
golem::detach_all_attached()
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
renv::snapshot(type = "explicit")
# Run the application
run_app()
library(bsicons)
renv::snapshot(type = "explicit")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
renv::snapshot(type = "explicit")
# Run the application
run_app()
run_app()
golem::document_and_reload()
renv::snapshot(type = "explicit")
# Run the application
run_app()
renv::snapshot(type = "explicit")
renv::snapshot(type = "implicit")
golem::document_and_reload()
library(bsicons)
golem::document_and_reload()
golem::document_and_reload()
golem::document_and_reload()
renv::snapshot(type = "explicit")
renv::snapshot()
?renv::snapshot
renv::snapshot(exclude="cveR")
library(bsicons)
renv::snapshot(exclude="cveR")
# Run the application
run_app()
library(bsicons)
# Run the application
run_app()
sessionInfo()
renv::snapshot(exclude="cveR")
renv::snapshot(exclude="cveR")
renv::snapshot(exclude="cveR")
renv::snapshot(exclude="cveR")
remotes::install_github('rstudio/bsicons')
renv::snapshot(exclude="cveR")
renv::snapshot(exclude="cveR")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
golem::document_and_reload()
golem::document_and_reload()
renv::snapshot(exclude="cveR")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
library(shinipsum)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
#options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# library(renv)
# init()
# Document and reload your package
golem::document_and_reload()
# explicit se refère au fichier description
renv::snapshot(exclude="cveR")
# Run the application
run_app()
install.packages("cropcircles")
library(cropcircles)
img_cropped <- hex_crop(
images = x$data$url,
border_colour = "#107e54",
border_size = 0
)
img_cropped <- hex_crop(
images = url,
border_colour = "#107e54",
border_size = 0
)
?hex_crop
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_colour = "#107e54",
border_size = 0
)
img_cropped
plot(img_cropped)
# Display the cropped image
plot(1, type = "n", xlim = c(0, 1), ylim = c(0, 1), xlab = "", ylab = "")
rasterImage(img_cropped, 0, 0, 1, 1)
# Save the cropped image
png("cropped_image.png")
rasterImage(img_cropped, 0, 0, 1, 1)
library(cropcircles)
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_colour = "#107e54",
border_size = 0
)
library(ggplot2)
# Display the image
ggplot() +
theme_void() +
annotation_custom(rasterGrob(img_cropped))
library(grid)
# Display the image
ggplot() +
theme_void() +
annotation_custom(rasterGrob(img_cropped))
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_size = 0
)
img_cropped
library(ggplot2)
library(grid)
# Display the image
ggplot() +
theme_void() +
annotation_custom(rasterGrob(img_cropped))
?ggsave
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_size = 0
)
image_write(img_cropped, "cveR-hex.png")
library(magick)
library(magick)
image_write(img_cropped, "cveR-hex.png")
image_read(img_cropped)
library(cropcircles)
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_size = 1,2,
border_colour = "#D14907"
)
library(magick)
image_read(img_cropped)
library(cropcircles)
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_size = 1,2,
border_colour = "#D14907"
)
img_cropped
library(cropcircles)
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_size = 1.2,
border_colour = "#D14907"
)
library(magick)
image_read(img_cropped)
library(cropcircles)
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_size = 12,
border_colour = "#D14907"
)
image_read(img_cropped)
library(cropcircles)
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_size = 24,
border_colour = "#D14907"
)
library(cropcircles)
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_size = 24,
border_colour = "#D14907"
)
library(magick)
image_read(img_cropped)
library(cropcircles)
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_size = 36,
border_colour = "#D14907"
)
library(magick)
image_read(img_cropped)
library(cropcircles)
img_cropped <- hex_crop(
images = file.path("../../Téléchargements/hex-cveR.png"),
border_size = 2,
border_colour = "#D14907"
)
library(magick)
image_read(img_cropped)
?hex_crop
