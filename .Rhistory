# Chunk 1: development
library(testthat)
# Chunk 2: development-load
# Load already included functions if relevant
pkgload::load_all(export_all = FALSE)
# Chunk 3: function-cves_harvesting
#' Download CSV from a URL
#'
#' This function downloads a CSV file from a given URL and stores it into a local file.
#'
#' @param url The URL of the CSV file. Default is "https://cve.mitre.org/data/downloads/allitems.csv".
#' @param file_name The name of the file where the CSV content will be stored. Default is "allitems.csv".
#' @importFrom utils download.file
#' @return A boolean indicating if the file was successfully downloaded.
#'
#' @examples
#' cves_harvesting()
#' cves_harvesting("https://cve.mitre.org/data/downloads/allitems.csv", "allitems.csv")
#'
#' @export
cves_harvesting <- function(url = "https://cve.mitre.org/data/downloads/allitems.csv",
file_name = "allitems.csv") {
# Download the file
download_status <- tryCatch({
download.file(url, file_name, mode = "wb")
TRUE
}, error = function(e) {
warning("Error in downloading the file: ", e)
FALSE
})
return(download_status)
}
# Chunk 4: examples-cves_harvesting
cves_harvesting()
# Chunk 5
write_head_to_csv <- function(input_file_name, output_file_name, num_rows = 6) {
data <- read.csv(input_file_name)
short_data <- head(data, n = num_rows)
write.csv(short_data, output_file_name, row.names = FALSE)
}
# Chunk 6
#write_head_to_csv(input_file_name = "allitems.csv", output_file_name = "tests/testthat/allitems_test.csv", num_rows = 60)
# Chunk 7: tests-cves_harvesting
test_that("cves_harvesting returns FALSE when an invalid URL is given", {
expect_false(cves_harvesting("http://this-is-an-invalid-url.csv"))
})
test_that("cves_harvesting returns TRUE when a valid URL is given", {
expect_true(cves_harvesting("https://raw.githubusercontent.com/Cdk29/cveR/main/tests/testthat/allitems_test.csv", "test_download_from_github.csv"))
})
test_that("test_download_from_github.csv is the same as allitems_test.csv", {
downloaded_data <- read.csv("test_download_from_github.csv")
#following lines due to how fusen works when inflating a package
test_data <- tryCatch(
{
read.csv("allitems_test.csv")
},
warning = function(w) {
read.csv("tests/testthat/allitems_test.csv")
},
error = function(e) {
read.csv("tests/testthat/allitems_test.csv")
})
expect_true(all.equal(downloaded_data, test_data))
})
# Chunk 8: function-read_data_CVEs
#' Read Data from CVEs CSV File
#'
#' This function reads a CSV file, skipping the first few rows to retrieve the headers and data separately.
#' It then assigns the header names to the data and returns a dataframe.
#'
#' @param file_name The name of the file to read.
#'
#' @return A dataframe with data from the CSV file.
#0'
#' @examples
#' read_data_CVEs("allitems.csv")
#'
#' @export
read_data_CVEs <- function(file_name) {
headers = read.csv(file_name, skip = 2, nrows = 1, header = TRUE)
data <- read.csv(file_name, encoding = "ISO-8859-1", skip = 10, header = TRUE, stringsAsFactors = FALSE)
colnames(data) <- colnames(headers)
return(data)
}
# Chunk 9: examples-read_data_CVEs
cves_harvesting("https://raw.githubusercontent.com/Cdk29/cveR/main/tests/testthat/allitems_test.csv", "test_download_from_github.csv")
CVEs_df <- read_data_CVEs("test_download_from_github.csv")
head(CVEs_df, 2)
colnames(CVEs_df)
# Chunk 10: tests-read_data_CVEs
test_that("read_data_CVEs correctly reads column names", {
# Attempt to read the test data from two different locations
test_data <- tryCatch(
{
read_data_CVEs("allitems_test.csv")
},
warning = function(w) {
read_data_CVEs("tests/testthat/allitems_test.csv")
},
error = function(e) {
read_data_CVEs("tests/testthat/allitems_test.csv")
}
)
expected_colnames <- c("Status", "Description", "References", "Phase", "Votes", "Comments")
expect_equal(colnames(test_data), expected_colnames)
})
# Run but keep eval=FALSE to avoid infinite loop
# Execute in the console directly
fusen::inflate(flat_file = "dev/flat_cves-harvesting.Rmd", vignette_name = "Cve_harvesting")
getwd()
usethis::use_github_action("test-coverage")
usethis::use_readme_rmd()
usethis::use_github_action("render-rmarkdown")
usethis::use_readme_rmd()
usethis::use_github_action("render-rmarkdown")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
golem::document_and_reload()
setwd("~/Bureau/cveR")
golem::document_and_reload()
renv::snapshot(type = "explicit")
golem::document_and_reload()
golem::detach_all_attached()
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
